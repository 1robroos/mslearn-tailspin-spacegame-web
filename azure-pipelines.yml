trigger:
- '*'

pool:
  vmImage: 'ubuntu-18.04'
  demands:
    - npm

variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '3.1.300'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
  inputs:
    version: '$(dotnetSdkVersion)'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- template: templates/build.yml
  parameters:
    buildConfiguration: 'Debug'

- template: templates/build.yml
  parameters:
    buildConfiguration: 'Release'

- script: |
   echo "var Build.StagingDirectory = $(Build.StagingDirectory)"
   ls -ltR $(Build.StagingDirectory)
   echo
   echo "var Build.ArtifactStagingDirectory = $(Build.ArtifactStagingDirectory)"
   ls -ltR $(Build.StagingDirectory)
   echo
   echo "var System.DefaultWorkingDirectory = $(System.DefaultWorkingDirectory)"
   ls -l $(System.DefaultWorkingDirectory)
   echo
   echo "Copy codedeploy files to Build.ArtifactStagingDirectory in Release subdir"
   cp $(System.DefaultWorkingDirectory)appspec.yml $(Build.ArtifactStagingDirectory)/Release
   cp -r $(System.DefaultWorkingDirectory)codedeploy $(Build.ArtifactStagingDirectory)/Release

   echo result
   ls -l $(Build.ArtifactStagingDirectory)/Release
   exit 0   
  displayName: 'Command Line Script Copy appspec.yml to Build.ArtifactStagingDirectory'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()

- script: |
   echo "var Build.StagingDirectory = $(Build.StagingDirectory)"
   ls -ltR $(Build.StagingDirectory)
   echo
   echo "$(Build.BinariesDirectory) contains ( is var Build.BinariesDirectory ) :"
   ls -ltR $(Build.BinariesDirectory)
   echo "$(Build.ArtifactStagingDirectory) is var Build.ArtifactStagingDirectory and contains:"
   ls -ltR $(Build.ArtifactStagingDirectory)
   echo
   echo "in the release the unzip function of Peter will unzip it in to var System.DefaultWorkingDirectory"
   echo "var $(System.DefaultWorkingDirectory)"
   ls -ltR  $(System.DefaultWorkingDirectory)
   exit 0   
  displayName: 'Command Line Script'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    ArtifactName: 'dropit'